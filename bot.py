import os
import requests
import sqlite3
from datetime import datetime, time
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from deep_translator import GoogleTranslator
from dotenv import load_dotenv
import logging

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API Edamam –∏ Telegram –±–æ—Ç–∞
EDAMAM_APP_ID = os.getenv('EDAMAM_APP_ID')
EDAMAM_APP_KEY = os.getenv('EDAMAM_APP_KEY')
BOT_TOKEN = os.getenv('BOT_TOKEN')

if not all([EDAMAM_APP_ID, EDAMAM_APP_KEY, BOT_TOKEN]):
    raise ValueError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã –≤ .env —Ñ–∞–π–ª–µ.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
translator = GoogleTranslator(source='ru', target='en')

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('nutrition.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        chat_id INTEGER
    )
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS entries (
        entry_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        date TEXT,
        product TEXT,
        amount REAL,
        calories REAL,
        proteins REAL,
        fats REAL,
        carbs REAL,
        FOREIGN KEY(user_id) REFERENCES users(user_id)
    )
''')
conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ö–ë–ñ–£ —á–µ—Ä–µ–∑ API Edamam
def get_nutrition(product, amount):
    url = 'https://api.edamam.com/api/nutrition-data'
    params = {
        'app_id': EDAMAM_APP_ID,
        'app_key': EDAMAM_APP_KEY,
        'ingr': f"{amount}g {product}"
    }
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        data = response.json()
        if data.get('totalNutrients'):
            nutrients = data['totalNutrients']
            calories = data.get('calories', 0)
            proteins = nutrients.get('PROCNT', {}).get('quantity', 0)
            fats = nutrients.get('FAT', {}).get('quantity', 0)
            carbs = nutrients.get('CHOCDF', {}).get('quantity', 0)
            return {
                '–∫–∞–ª–æ—Ä–∏–∏': calories,
                '–±–µ–ª–∫–∏': proteins,
                '–∂–∏—Ä—ã': fats,
                '—É–≥–ª–µ–≤–æ–¥—ã': carbs
            }
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API Edamam: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ API Edamam: {e}")
    return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    chat_id = update.effective_chat.id

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    if cursor.fetchone() is None:
        cursor.execute('INSERT INTO users (user_id, chat_id) VALUES (?, ?)', (user_id, chat_id))
        conn.commit()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: user_id={user_id}, chat_id={chat_id}")

    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç '–ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ'!\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "—è–±–ª–æ–∫–æ 200\n"
        "—Ä–∏—Å 100\n"
        "–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ 200\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
        "/report - –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω—ã—Ö –ö–ë–ñ–£ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n\n"
        "üí¨ *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:* –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "`—è–±–ª–æ–∫–æ 200`\n"
        "`—Ä–∏—Å 100`\n"
        "`–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ 200`"
    )
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def add_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.lower().strip()
    if not user_input:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: —è–±–ª–æ–∫–æ 200")
        return

    parts = user_input.split()
    if len(parts) < 2:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –∏ –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: —è–±–ª–æ–∫–æ 200")
        return
    try:
        amount = float(parts[-1])
        if amount <= 0 or amount > 5000:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç 1 –¥–æ 5000 –≥—Ä–∞–º–º.")
            return
        product_russian = ' '.join(parts[:-1])
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 100")
        return

    # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    try:
        product_english = translator.translate(product_russian)
        logger.info(f"–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ '{product_russian}' –Ω–∞ '{product_english}'")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –ø—Ä–æ–¥—É–∫—Ç–∞ '{product_russian}': {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    if not product_english:
        logger.error(f"–ü–µ—Ä–µ–≤–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–∞ '{product_russian}' –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    nutrition = get_nutrition(product_english, amount)
    if not nutrition:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    user = update.effective_user
    user_id = user.id
    chat_id = update.effective_chat.id
    date_str = datetime.now().strftime("%Y-%m-%d")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    if cursor.fetchone() is None:
        cursor.execute('INSERT INTO users (user_id, chat_id) VALUES (?, ?)', (user_id, chat_id))
        conn.commit()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–µ—Ä–µ–∑ add_product: user_id={user_id}, chat_id={chat_id}")

    # –í—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É entries
    cursor.execute('''
        INSERT INTO entries (user_id, date, product, amount, calories, proteins, fats, carbs)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        user_id,
        date_str,
        product_russian,  # –•—Ä–∞–Ω–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        amount,
        nutrition['–∫–∞–ª–æ—Ä–∏–∏'],
        nutrition['–±–µ–ª–∫–∏'],
        nutrition['–∂–∏—Ä—ã'],
        nutrition['—É–≥–ª–µ–≤–æ–¥—ã']
    ))
    conn.commit()
    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å: user_id={user_id}, product='{product_russian}', amount={amount}")

    await update.message.reply_text(
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {product_russian} - {amount} –≥\n"
        f"–ö–∞–ª–æ—Ä–∏–∏: {nutrition['–∫–∞–ª–æ—Ä–∏–∏']:.2f} –∫–∫–∞–ª\n"
        f"–ë–µ–ª–∫–∏: {nutrition['–±–µ–ª–∫–∏']:.2f} –≥, –ñ–∏—Ä—ã: {nutrition['–∂–∏—Ä—ã']:.2f} –≥, –£–≥–ª–µ–≤–æ–¥—ã: {nutrition['—É–≥–ª–µ–≤–æ–¥—ã']:.2f} –≥"
    )

async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    date_str = datetime.now().strftime("%Y-%m-%d")
    cursor.execute('''
        SELECT product, amount, calories, proteins, fats, carbs FROM entries
        WHERE user_id = ? AND date = ?
    ''', (user_id, date_str))
    rows = cursor.fetchall()
    if not rows:
        await update.message.reply_text("–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è.")
        return

    total_calories = total_proteins = total_fats = total_carbs = 0
    report_lines = [f"üìä *–û—Ç—á–µ—Ç –∑–∞ {date_str}:*\n"]
    for product, amount, calories, proteins, fats, carbs in rows:
        total_calories += calories
        total_proteins += proteins
        total_fats += fats
        total_carbs += carbs
        report_lines.append(
            f"- {product.capitalize()}: {amount} –≥\n"
            f"  –ö–∞–ª–æ—Ä–∏–∏: {calories:.2f} –∫–∫–∞–ª, "
            f"–ë: {proteins:.2f} –≥, –ñ: {fats:.2f} –≥, –£: {carbs:.2f} –≥\n"
        )

    report_lines.append(
        f"\n*–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å:*\n"
        f"–ö–∞–ª–æ—Ä–∏–∏: {total_calories:.2f} –∫–∫–∞–ª\n"
        f"–ë–µ–ª–∫–∏: {total_proteins:.2f} –≥\n"
        f"–ñ–∏—Ä—ã: {total_fats:.2f} –≥\n"
        f"–£–≥–ª–µ–≤–æ–¥—ã: {total_carbs:.2f} –≥"
    )
    report_text = ''.join(report_lines)
    await update.message.reply_text(report_text, parse_mode='Markdown')

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: —è–±–ª–æ–∫–æ 200"
    )

async def scheduled_daily_report(application):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('SELECT chat_id, user_id FROM users')
    users = cursor.fetchall()
    date_str = datetime.now().strftime("%Y-%m-%d")
    for (chat_id, user_id) in users:
        cursor.execute('''
            SELECT product, amount, calories, proteins, fats, carbs FROM entries
            WHERE user_id = ? AND date = ?
        ''', (user_id, date_str))
        rows = cursor.fetchall()
        if not rows:
            await application.bot.send_message(chat_id=chat_id, text="–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è.")
            continue

        total_calories = total_proteins = total_fats = total_carbs = 0
        report_lines = [f"üìä *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –∑–∞ {date_str}:*\n"]
        for product, amount, calories, proteins, fats, carbs in rows:
            total_calories += calories
            total_proteins += proteins
            total_fats += fats
            total_carbs += carbs
            report_lines.append(
                f"- {product.capitalize()}: {amount} –≥\n"
                f"  –ö–∞–ª–æ—Ä–∏–∏: {calories:.2f} –∫–∫–∞–ª, "
                f"–ë: {proteins:.2f} –≥, –ñ: {fats:.2f} –≥, –£: {carbs:.2f} –≥\n"
            )

        report_lines.append(
            f"\n*–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å:*\n"
            f"–ö–∞–ª–æ—Ä–∏–∏: {total_calories:.2f} –∫–∫–∞–ª\n"
            f"–ë–µ–ª–∫–∏: {total_proteins:.2f} –≥\n"
            f"–ñ–∏—Ä—ã: {total_fats:.2f} –≥\n"
            f"–£–≥–ª–µ–≤–æ–¥—ã: {total_carbs:.2f} –≥"
        )
        report_text = ''.join(report_lines)
        await application.bot.send_message(chat_id=chat_id, text=report_text, parse_mode='Markdown')
        logger.info(f"–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (chat_id={chat_id})")

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º BOT_TOKEN
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥8
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("report", report))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, add_product))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(filters.COMMAND, unknown))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ 23:59 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    async def job_callback(context: ContextTypes.DEFAULT_TYPE):
        await scheduled_daily_report(application)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ Job Queue
    job_time = time(hour=23, minute=59, second=0)
    application.job_queue.run_daily(job_callback, job_time)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
